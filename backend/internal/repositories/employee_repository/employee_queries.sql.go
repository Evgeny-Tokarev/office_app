// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: employee_queries.sql

package employee_repository

import (
	"context"
	"database/sql"
)

const attachePhoto = `-- name: AttachePhoto :exec
update employees
set img_file=$1
where id = $2
`

type AttachePhotoParams struct {
	ImgFile sql.NullString `db:"img_file"`
	ID      int64          `db:"id"`
}

func (q *Queries) AttachePhoto(ctx context.Context, arg AttachePhotoParams) error {
	_, err := q.db.ExecContext(ctx, attachePhoto, arg.ImgFile, arg.ID)
	return err
}

const createEmployee = `-- name: CreateEmployee :one
insert into employees (name, age, created_at, updated_at, office_id)
values ($1, $2, NOW(), NOW(), $3)
RETURNING id, name, age, office_id, created_at, updated_at, img_file
`

type CreateEmployeeParams struct {
	Name     string `db:"name"`
	Age      int32  `db:"age"`
	OfficeID int64  `db:"office_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee, arg.Name, arg.Age, arg.OfficeID)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.OfficeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImgFile,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE
FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, name, age, office_id, created_at, updated_at, img_file
FROM employees
WHERE id = $1
LIMIT 1
`

// @sql postgresql
func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.OfficeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImgFile,
	)
	return i, err
}

const getImagePath = `-- name: GetImagePath :one
select COALESCE(img_file, '')
from employees
where id = $1
`

func (q *Queries) GetImagePath(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getImagePath, id)
	var img_file string
	err := row.Scan(&img_file)
	return img_file, err
}

const listEmployees = `-- name: ListEmployees :many
select id, name, age, office_id, created_at, updated_at, img_file
from employees
where office_id = $1
`

func (q *Queries) ListEmployees(ctx context.Context, officeID int64) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees, officeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.OfficeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImgFile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
update employees
set name=$1,
    age=$2,
    updated_at=NOW()
where id = $3
`

type UpdateEmployeeParams struct {
	Name string `db:"name"`
	Age  int32  `db:"age"`
	ID   int64  `db:"id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployee, arg.Name, arg.Age, arg.ID)
	return err
}
