// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: office_queries.sql

package office_repository

import (
	"context"
	"database/sql"
	"fmt"
	"time"
)

const attachePhoto = `-- name: AttachePhoto :exec
update offices set img_file=$1
where id=$2
`

type AttachePhotoParams struct {
	ImgFile sql.NullString `db:"img_file"`
	ID      int64          `db:"id"`
}

func (q *Queries) AttachePhoto(ctx context.Context, arg AttachePhotoParams) error {
	_, err := q.db.ExecContext(ctx, attachePhoto, arg.ImgFile, arg.ID)
	return err
}

const createOffice = `-- name: CreateOffice :one
insert into offices (name, address, created_at, updated_at)
values ($1, $2, now(), now())
RETURNING id, name, address, created_at, updated_at, img_file
`

type CreateOfficeParams struct {
	Name    string `db:"name"`
	Address string `db:"address"`
}

func (q *Queries) CreateOffice(ctx context.Context, arg CreateOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, createOffice, arg.Name, arg.Address)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImgFile,
	)
	return i, err
}

const deleteOffice = `-- name: DeleteOffice :exec
DELETE FROM offices
WHERE id = $1
`

func (q *Queries) DeleteOffice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOffice, id)
	return err
}

const getImagePath = `-- name: GetImagePath :one
select COALESCE(img_file, '') from offices where id = $1
`

func (q *Queries) GetImagePath(ctx context.Context, id int64) (string, error) {
	fmt.Println("Unfortunately it's real implementation")
	row := q.db.QueryRowContext(ctx, getImagePath, id)
	var img_file string
	err := row.Scan(&img_file)
	return img_file, err
}

const getOffice = `-- name: GetOffice :one
SELECT id, name, address, created_at, updated_at, img_file FROM offices
WHERE id = $1 LIMIT 1
`

// @sql postgresql
func (q *Queries) GetOffice(ctx context.Context, id int64) (Office, error) {
	row := q.db.QueryRowContext(ctx, getOffice, id)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImgFile,
	)
	return i, err
}

const listOffices = `-- name: ListOffices :many
SELECT id, name, address, created_at, updated_at, img_file FROM offices
ORDER BY id
`

func (q *Queries) ListOffices(ctx context.Context) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, listOffices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Office
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImgFile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffice = `-- name: UpdateOffice :exec
update offices set name=$1, address=$2, updated_at=$3
where id = $4
`

type UpdateOfficeParams struct {
	Name      string    `db:"name"`
	Address   string    `db:"address"`
	UpdatedAt time.Time `db:"updated_at"`
	ID        int64     `db:"id"`
}

func (q *Queries) UpdateOffice(ctx context.Context, arg UpdateOfficeParams) error {
	_, err := q.db.ExecContext(ctx, updateOffice,
		arg.Name,
		arg.Address,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
