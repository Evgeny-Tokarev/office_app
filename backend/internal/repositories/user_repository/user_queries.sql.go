// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_queries.sql

package user_repository

import (
	"context"
	"database/sql"
	"time"
)

const attachePhoto = `-- name: AttachePhoto :exec
update users
set img_file=$1
where id = $2
`

type AttachePhotoParams struct {
	ImgFile sql.NullString `db:"img_file"`
	ID      int64          `db:"id"`
}

func (q *Queries) AttachePhoto(ctx context.Context, arg AttachePhotoParams) error {
	_, err := q.db.ExecContext(ctx, attachePhoto, arg.ImgFile, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, role, hashed_password, created_at, password_changed_at)
VALUES ($1, $2, $3, $4, now(), '0001-01-01 00:00:00Z'::timestamp)
RETURNING id, name, email, role, hashed_password, password_changed_at, created_at, img_file
`

type CreateUserParams struct {
	Name           string `db:"name"`
	Email          string `db:"email"`
	Role           string `db:"role"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ImgFile,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getImagePath = `-- name: GetImagePath :one
select COALESCE(img_file, '')
from users
where id = $1
`

func (q *Queries) GetImagePath(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getImagePath, id)
	var img_file string
	err := row.Scan(&img_file)
	return img_file, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, role, hashed_password, password_changed_at, created_at, img_file
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ImgFile,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, role, hashed_password, password_changed_at, created_at, img_file
FROM users
WHERE id = $1
LIMIT 1
`

// @sql postgresql
func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ImgFile,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, role, hashed_password, password_changed_at, created_at, img_file
FROM users
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ImgFile,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
select id, name, email, role, hashed_password, created_at, password_changed_at, img_file
from users
`

type ListUsersRow struct {
	ID                int64          `db:"id"`
	Name              string         `db:"name"`
	Email             string         `db:"email"`
	Role              string         `db:"role"`
	HashedPassword    string         `db:"hashed_password"`
	CreatedAt         time.Time      `db:"created_at"`
	PasswordChangedAt time.Time      `db:"password_changed_at"`
	ImgFile           sql.NullString `db:"img_file"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.HashedPassword,
			&i.CreatedAt,
			&i.PasswordChangedAt,
			&i.ImgFile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
update users
set name=$1,
    email=$2,
    role=$3
where id = $4
`

type UpdateUserParams struct {
	Name  string `db:"name"`
	Email string `db:"email"`
	Role  string `db:"role"`
	ID    int64  `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
update users
set hashed_password=$1
where id = $2
`

type UpdateUserPasswordParams struct {
	HashedPassword string `db:"hashed_password"`
	ID             int64  `db:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.ID)
	return err
}
