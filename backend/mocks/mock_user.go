// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user_repository "github.com/evgeny-tokarev/office_app/backend/internal/repositories/user_repository"
	mock "github.com/stretchr/testify/mock"
)

// MockUser is an autogenerated mock type for the Querier type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// AttachePhoto provides a mock function with given fields: ctx, arg
func (_m *MockUser) AttachePhoto(ctx context.Context, arg user_repository.AttachePhotoParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AttachePhoto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user_repository.AttachePhotoParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_AttachePhoto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachePhoto'
type MockUser_AttachePhoto_Call struct {
	*mock.Call
}

// AttachePhoto is a helper method to define mock.On call
//   - ctx context.Context
//   - arg user_repository.AttachePhotoParams
func (_e *MockUser_Expecter) AttachePhoto(ctx interface{}, arg interface{}) *MockUser_AttachePhoto_Call {
	return &MockUser_AttachePhoto_Call{Call: _e.mock.On("AttachePhoto", ctx, arg)}
}

func (_c *MockUser_AttachePhoto_Call) Run(run func(ctx context.Context, arg user_repository.AttachePhotoParams)) *MockUser_AttachePhoto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user_repository.AttachePhotoParams))
	})
	return _c
}

func (_c *MockUser_AttachePhoto_Call) Return(_a0 error) *MockUser_AttachePhoto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_AttachePhoto_Call) RunAndReturn(run func(context.Context, user_repository.AttachePhotoParams) error) *MockUser_AttachePhoto_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockUser) CreateUser(ctx context.Context, arg user_repository.CreateUserParams) (user_repository.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 user_repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user_repository.CreateUserParams) (user_repository.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user_repository.CreateUserParams) user_repository.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(user_repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user_repository.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUser_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg user_repository.CreateUserParams
func (_e *MockUser_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockUser_CreateUser_Call {
	return &MockUser_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockUser_CreateUser_Call) Run(run func(ctx context.Context, arg user_repository.CreateUserParams)) *MockUser_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user_repository.CreateUserParams))
	})
	return _c
}

func (_c *MockUser_CreateUser_Call) Return(_a0 user_repository.User, _a1 error) *MockUser_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_CreateUser_Call) RunAndReturn(run func(context.Context, user_repository.CreateUserParams) (user_repository.User, error)) *MockUser_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockUser) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUser_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUser_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUser_DeleteUser_Call {
	return &MockUser_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUser_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *MockUser_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUser_DeleteUser_Call) Return(_a0 error) *MockUser_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_DeleteUser_Call) RunAndReturn(run func(context.Context, int64) error) *MockUser_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetImagePath provides a mock function with given fields: ctx, id
func (_m *MockUser) GetImagePath(ctx context.Context, id int64) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetImagePath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_GetImagePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImagePath'
type MockUser_GetImagePath_Call struct {
	*mock.Call
}

// GetImagePath is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUser_Expecter) GetImagePath(ctx interface{}, id interface{}) *MockUser_GetImagePath_Call {
	return &MockUser_GetImagePath_Call{Call: _e.mock.On("GetImagePath", ctx, id)}
}

func (_c *MockUser_GetImagePath_Call) Run(run func(ctx context.Context, id int64)) *MockUser_GetImagePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUser_GetImagePath_Call) Return(_a0 string, _a1 error) *MockUser_GetImagePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_GetImagePath_Call) RunAndReturn(run func(context.Context, int64) (string, error)) *MockUser_GetImagePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUser) GetUserByEmail(ctx context.Context, email string) (user_repository.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 user_repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user_repository.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user_repository.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(user_repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUser_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUser_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUser_GetUserByEmail_Call {
	return &MockUser_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUser_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUser_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUser_GetUserByEmail_Call) Return(_a0 user_repository.User, _a1 error) *MockUser_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (user_repository.User, error)) *MockUser_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *MockUser) GetUserById(ctx context.Context, id int64) (user_repository.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 user_repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (user_repository.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) user_repository.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(user_repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUser_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUser_Expecter) GetUserById(ctx interface{}, id interface{}) *MockUser_GetUserById_Call {
	return &MockUser_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockUser_GetUserById_Call) Run(run func(ctx context.Context, id int64)) *MockUser_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUser_GetUserById_Call) Return(_a0 user_repository.User, _a1 error) *MockUser_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_GetUserById_Call) RunAndReturn(run func(context.Context, int64) (user_repository.User, error)) *MockUser_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function with given fields: ctx, name
func (_m *MockUser) GetUserByName(ctx context.Context, name string) (user_repository.User, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 user_repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user_repository.User, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user_repository.User); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(user_repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type MockUser_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUser_Expecter) GetUserByName(ctx interface{}, name interface{}) *MockUser_GetUserByName_Call {
	return &MockUser_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, name)}
}

func (_c *MockUser_GetUserByName_Call) Run(run func(ctx context.Context, name string)) *MockUser_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUser_GetUserByName_Call) Return(_a0 user_repository.User, _a1 error) *MockUser_GetUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_GetUserByName_Call) RunAndReturn(run func(context.Context, string) (user_repository.User, error)) *MockUser_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *MockUser) ListUsers(ctx context.Context) ([]user_repository.ListUsersRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []user_repository.ListUsersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]user_repository.ListUsersRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []user_repository.ListUsersRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user_repository.ListUsersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUser_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUser_Expecter) ListUsers(ctx interface{}) *MockUser_ListUsers_Call {
	return &MockUser_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockUser_ListUsers_Call) Run(run func(ctx context.Context)) *MockUser_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUser_ListUsers_Call) Return(_a0 []user_repository.ListUsersRow, _a1 error) *MockUser_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_ListUsers_Call) RunAndReturn(run func(context.Context) ([]user_repository.ListUsersRow, error)) *MockUser_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *MockUser) UpdateUser(ctx context.Context, arg user_repository.UpdateUserParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user_repository.UpdateUserParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUser_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg user_repository.UpdateUserParams
func (_e *MockUser_Expecter) UpdateUser(ctx interface{}, arg interface{}) *MockUser_UpdateUser_Call {
	return &MockUser_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *MockUser_UpdateUser_Call) Run(run func(ctx context.Context, arg user_repository.UpdateUserParams)) *MockUser_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user_repository.UpdateUserParams))
	})
	return _c
}

func (_c *MockUser_UpdateUser_Call) Return(_a0 error) *MockUser_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_UpdateUser_Call) RunAndReturn(run func(context.Context, user_repository.UpdateUserParams) error) *MockUser_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *MockUser) UpdateUserPassword(ctx context.Context, arg user_repository.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user_repository.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type MockUser_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg user_repository.UpdateUserPasswordParams
func (_e *MockUser_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *MockUser_UpdateUserPassword_Call {
	return &MockUser_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *MockUser_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg user_repository.UpdateUserPasswordParams)) *MockUser_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user_repository.UpdateUserPasswordParams))
	})
	return _c
}

func (_c *MockUser_UpdateUserPassword_Call) Return(_a0 error) *MockUser_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_UpdateUserPassword_Call) RunAndReturn(run func(context.Context, user_repository.UpdateUserPasswordParams) error) *MockUser_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
