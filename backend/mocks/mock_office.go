// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	office_repository "github.com/evgeny-tokarev/office_app/backend/internal/repositories/office_repository"
	mock "github.com/stretchr/testify/mock"
)

// MockOffice is an autogenerated mock type for the Querier type
type MockOffice struct {
	mock.Mock
}

type MockOffice_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOffice) EXPECT() *MockOffice_Expecter {
	return &MockOffice_Expecter{mock: &_m.Mock}
}

// AttachePhoto provides a mock function with given fields: ctx, arg
func (_m *MockOffice) AttachePhoto(ctx context.Context, arg office_repository.AttachePhotoParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AttachePhoto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, office_repository.AttachePhotoParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOffice_AttachePhoto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachePhoto'
type MockOffice_AttachePhoto_Call struct {
	*mock.Call
}

// AttachePhoto is a helper method to define mock.On call
//   - ctx context.Context
//   - arg office_repository.AttachePhotoParams
func (_e *MockOffice_Expecter) AttachePhoto(ctx interface{}, arg interface{}) *MockOffice_AttachePhoto_Call {
	return &MockOffice_AttachePhoto_Call{Call: _e.mock.On("AttachePhoto", ctx, arg)}
}

func (_c *MockOffice_AttachePhoto_Call) Run(run func(ctx context.Context, arg office_repository.AttachePhotoParams)) *MockOffice_AttachePhoto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(office_repository.AttachePhotoParams))
	})
	return _c
}

func (_c *MockOffice_AttachePhoto_Call) Return(_a0 error) *MockOffice_AttachePhoto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOffice_AttachePhoto_Call) RunAndReturn(run func(context.Context, office_repository.AttachePhotoParams) error) *MockOffice_AttachePhoto_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOffice provides a mock function with given fields: ctx, arg
func (_m *MockOffice) CreateOffice(ctx context.Context, arg office_repository.CreateOfficeParams) (office_repository.Office, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateOffice")
	}

	var r0 office_repository.Office
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, office_repository.CreateOfficeParams) (office_repository.Office, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, office_repository.CreateOfficeParams) office_repository.Office); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(office_repository.Office)
	}

	if rf, ok := ret.Get(1).(func(context.Context, office_repository.CreateOfficeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOffice_CreateOffice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOffice'
type MockOffice_CreateOffice_Call struct {
	*mock.Call
}

// CreateOffice is a helper method to define mock.On call
//   - ctx context.Context
//   - arg office_repository.CreateOfficeParams
func (_e *MockOffice_Expecter) CreateOffice(ctx interface{}, arg interface{}) *MockOffice_CreateOffice_Call {
	return &MockOffice_CreateOffice_Call{Call: _e.mock.On("CreateOffice", ctx, arg)}
}

func (_c *MockOffice_CreateOffice_Call) Run(run func(ctx context.Context, arg office_repository.CreateOfficeParams)) *MockOffice_CreateOffice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(office_repository.CreateOfficeParams))
	})
	return _c
}

func (_c *MockOffice_CreateOffice_Call) Return(_a0 office_repository.Office, _a1 error) *MockOffice_CreateOffice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOffice_CreateOffice_Call) RunAndReturn(run func(context.Context, office_repository.CreateOfficeParams) (office_repository.Office, error)) *MockOffice_CreateOffice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOffice provides a mock function with given fields: ctx, id
func (_m *MockOffice) DeleteOffice(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOffice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOffice_DeleteOffice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOffice'
type MockOffice_DeleteOffice_Call struct {
	*mock.Call
}

// DeleteOffice is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockOffice_Expecter) DeleteOffice(ctx interface{}, id interface{}) *MockOffice_DeleteOffice_Call {
	return &MockOffice_DeleteOffice_Call{Call: _e.mock.On("DeleteOffice", ctx, id)}
}

func (_c *MockOffice_DeleteOffice_Call) Run(run func(ctx context.Context, id int64)) *MockOffice_DeleteOffice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockOffice_DeleteOffice_Call) Return(_a0 error) *MockOffice_DeleteOffice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOffice_DeleteOffice_Call) RunAndReturn(run func(context.Context, int64) error) *MockOffice_DeleteOffice_Call {
	_c.Call.Return(run)
	return _c
}

// GetImagePath provides a mock function with given fields: ctx, id
func (_m *MockOffice) GetImagePath(ctx context.Context, id int64) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetImagePath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOffice_GetImagePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImagePath'
type MockOffice_GetImagePath_Call struct {
	*mock.Call
}

// GetImagePath is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockOffice_Expecter) GetImagePath(ctx interface{}, id interface{}) *MockOffice_GetImagePath_Call {
	return &MockOffice_GetImagePath_Call{Call: _e.mock.On("GetImagePath", ctx, id)}
}

func (_c *MockOffice_GetImagePath_Call) Run(run func(ctx context.Context, id int64)) *MockOffice_GetImagePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockOffice_GetImagePath_Call) Return(_a0 string, _a1 error) *MockOffice_GetImagePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOffice_GetImagePath_Call) RunAndReturn(run func(context.Context, int64) (string, error)) *MockOffice_GetImagePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOffice provides a mock function with given fields: ctx, id
func (_m *MockOffice) GetOffice(ctx context.Context, id int64) (office_repository.Office, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOffice")
	}

	var r0 office_repository.Office
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (office_repository.Office, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) office_repository.Office); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(office_repository.Office)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOffice_GetOffice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOffice'
type MockOffice_GetOffice_Call struct {
	*mock.Call
}

// GetOffice is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockOffice_Expecter) GetOffice(ctx interface{}, id interface{}) *MockOffice_GetOffice_Call {
	return &MockOffice_GetOffice_Call{Call: _e.mock.On("GetOffice", ctx, id)}
}

func (_c *MockOffice_GetOffice_Call) Run(run func(ctx context.Context, id int64)) *MockOffice_GetOffice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockOffice_GetOffice_Call) Return(_a0 office_repository.Office, _a1 error) *MockOffice_GetOffice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOffice_GetOffice_Call) RunAndReturn(run func(context.Context, int64) (office_repository.Office, error)) *MockOffice_GetOffice_Call {
	_c.Call.Return(run)
	return _c
}

// ListOffices provides a mock function with given fields: ctx
func (_m *MockOffice) ListOffices(ctx context.Context) ([]office_repository.Office, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOffices")
	}

	var r0 []office_repository.Office
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]office_repository.Office, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []office_repository.Office); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]office_repository.Office)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOffice_ListOffices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOffices'
type MockOffice_ListOffices_Call struct {
	*mock.Call
}

// ListOffices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOffice_Expecter) ListOffices(ctx interface{}) *MockOffice_ListOffices_Call {
	return &MockOffice_ListOffices_Call{Call: _e.mock.On("ListOffices", ctx)}
}

func (_c *MockOffice_ListOffices_Call) Run(run func(ctx context.Context)) *MockOffice_ListOffices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOffice_ListOffices_Call) Return(_a0 []office_repository.Office, _a1 error) *MockOffice_ListOffices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOffice_ListOffices_Call) RunAndReturn(run func(context.Context) ([]office_repository.Office, error)) *MockOffice_ListOffices_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOffice provides a mock function with given fields: ctx, arg
func (_m *MockOffice) UpdateOffice(ctx context.Context, arg office_repository.UpdateOfficeParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOffice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, office_repository.UpdateOfficeParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOffice_UpdateOffice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOffice'
type MockOffice_UpdateOffice_Call struct {
	*mock.Call
}

// UpdateOffice is a helper method to define mock.On call
//   - ctx context.Context
//   - arg office_repository.UpdateOfficeParams
func (_e *MockOffice_Expecter) UpdateOffice(ctx interface{}, arg interface{}) *MockOffice_UpdateOffice_Call {
	return &MockOffice_UpdateOffice_Call{Call: _e.mock.On("UpdateOffice", ctx, arg)}
}

func (_c *MockOffice_UpdateOffice_Call) Run(run func(ctx context.Context, arg office_repository.UpdateOfficeParams)) *MockOffice_UpdateOffice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(office_repository.UpdateOfficeParams))
	})
	return _c
}

func (_c *MockOffice_UpdateOffice_Call) Return(_a0 error) *MockOffice_UpdateOffice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOffice_UpdateOffice_Call) RunAndReturn(run func(context.Context, office_repository.UpdateOfficeParams) error) *MockOffice_UpdateOffice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOffice creates a new instance of MockOffice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOffice(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOffice {
	mock := &MockOffice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
